<?php
/**
 * \date 2017-09-13
 * \addtogroup CRON
 * Iterate through the 'product_locks' table, get all rows and see if any locks are stale.
 * Remove them and inc the product qty by the value stored in the row.
 */
namespace App;

use App\Models\Products;
use App\Models\ProductLocks;
use App\Traits\Logger;
use DB;



class CRON_ClearLocks
{
use Logger;

	public function Run()
	{
		$this->setFileName("store-cron");
		$stale_time = time()-300;
		$product_locks = ProductLocks::all();
		if(sizeof($product_locks)>0)
		{
			$this->LogStart();
			$this->LogMsg("Check time is [".$stale_time."]");
			foreach($product_locks as $locked)
			{
				$this->LogMsg("Checking product_locks row ID [".$locked->id."]");
				if($locked->product_lock_utime < $stale_time)
				{
					$this->LogMsg("product_locks row ID [".$locked->id."] is stale - remove");
					$this->LogMsg("Product ID [".$locked->product_lock_pid."]");
					$product = Products::where('id',$locked->product_lock_pid)->first();
					$locked_qty = $locked->product_lock_qty;
					$stock_qty = $product->prod_qty;
					$this->LogMsg("Product QTY [".$stock_qty."] add back [".$locked_qty."]");
	
					\DB::beginTransaction();
					$this->LogMsg("Updating Product [".$product->id."]");
					$product->prod_qty = $stock_qty + $locked_qty;
					$product->save();
					$this->LogMsg("Removing Lock [".$locked->id."]");
					$locked->delete();
					\DB::commit();
					$this->LogMsg("TX Complete.");
				}
			}
			$this->LogEnd();
		}
	}
}


$o = new CRON_ClearLocks;
$o->Run();
